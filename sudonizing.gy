package tolkienizer

import groovy.transform.*

void main() {
	;
}

trait Sudonizer {
	abstract def sudonize(rawString)
	
	abstract def getRegister()
	
	def sudonize(rawString, annotations) { return sudonize(rawString) }
}

class AwareSudonizer implements Sudonizer {
	def register = [:]
	def sudonizer = null
	
	AwareSudonizer(baseSudonizer, globalRegister) {
		sudonizer = baseSudonizer
		register = globalRegister
	}
	
	def sudonize(rawString) {
		if(register[rawString] != null) return register[rawString] 
		def sudo = sudonizer.sudonize(rawString)
		register[rawString] = sudo
		return sudo
	}
	
	
}

class AwareEmailSudonizer extends AwareSudonizer {
	
	def mails2sudo = [:]
	
	AwareEmailSudonizer(baseSudonizer, globalRegister) {
		super(baseSudonizer, globalRegister)
	}
	
	def sudonize(rawString, annotations) {
		annotations = annotations.split(" ")
		if (mails2sudo[rawString] !=null) return mails2sudo[rawString]
		def sudotokens = ""
		for (annotation in annotations[0..-1])
			if (annotation != "@") sudotokens += "${sudonize(annotation)}."
			else sudotokens = sudotokens[0..-1] + "${annotation}"
		sudotokens += annotations[-1]
		sudotokens = sudotokens.replace(" ", "_").toLowerCase()
		mails2sudo[rawString] = sudotokens
		return sudotokens
	}
}

class SimpleSudonizer implements Sudonizer {
    def ne2tolkien = [:]
    def tolkien2ne = [:]
    def usableNames = []
	def idx = 0 //cyclic reading
    
	def register =[:]
	
    SimpleSudonizer(namesFile, globalRegister) {
        usableNames = namesFile.readLines()
		register = globalRegister
    }
    
    void addEntityMapping(entity) {
        def nextName = usableNames[idx]
		idx = ++idx % usableNames.size() //cyclic reading
		ne2tolkien[entity] = nextName
        tolkien2ne[nextName] = entity
		register[entity] = nextName
    }
    
   	def getSudoMapped(entity) {
        return ne2tolkien[entity]
    }
     
   def getEntityMapped(sudo) {
       return tolkien2ne[sudo]
   }

	def sudonize(rawString) {
		if (getSudoMapped(rawString) == null) addEntityMapping(rawString)
		return getSudoMapped(rawString)
	}
	
	def geRegister() {
		return register
	}
}



class PersonWrapper {
	def gender
	def firstName
	def lastName
	
	String toString() {
		def lastNameProper = ""
		if (lastName != null)
			if (lastName.startsWith(" of "))
				if (gender== "f") lastNameProper = " daughter$lastName"
				else lastNameProper = " son$lastName"
			else lastNameProper = lastName
		return firstName + lastNameProper
	}
	
	public boolean equals(Object other) {
		return other instanceof PersonWrapper && other.firstName.equals(firstName) && other.lastName.equals(lastName) && other.gender.equals(gender)
	}
}

class PersonSudonizer implements Sudonizer {
	def persons = [] as Set
	def person2Tolkienkin = [:]
	def tolkienkin2person = [:]
	def firstNameMapper = [:]
	def lastNameMapper = [:]
	def usableFemaleFirstNames = [] as Set
	def femaleIdx = 0
	def usableMaleFirstNames = [] as Set
	def maleIdx = 0
	def usableLastNames = [] as Set
	def lastNameIdx = 0
	
	def register = [:]
	
	PersonSudonizer(mappingFile, globalRegister) {
		def mappings = mappingFile.readLines()
		for (femaleName in  mappings.findAll({it.split("\t")[1] == "f"})) {
			def id = femaleName.split("\t")
			if (id[0].split(" ").length > 1)  {
				def firstName = id[0].split(" ")[0]
				def lastName = id[0].split(" ")[1..-1].join(" ")
				usableFemaleFirstNames << firstName
				usableLastNames << lastName
				usableLastNames << " of " + firstName
			} else {
				usableFemaleFirstNames << id[0]
				usableLastNames << " of " + id[0]
			}
		}
		for (maleName in  mappings.findAll({it.split("\t")[1] != "f"})) {
			def id = maleName.split("\t")
			if (id[0].split(" ").length > 1)  {
				def firstName = id[0].split(" ")[0]
				def lastName = id[0].split(" ")[1..-1].join(" ")
				usableMaleFirstNames << firstName
				usableLastNames << lastName
				usableLastNames << " of " + firstName
			} else {
				usableMaleFirstNames << id[0]
				usableLastNames << " of " + id[0]
			}
		}
		usableFemaleFirstNames = usableFemaleFirstNames as List
		usableLastNames = usableLastNames as List
		usableMaleFirstNames = usableMaleFirstNames as List
		
		Collections.shuffle usableFemaleFirstNames
		Collections.shuffle usableMaleFirstNames
		Collections.shuffle usableLastNames
		
		register = globalRegister
	}
	
	def addPerson(person) {
		if (person.gender == "f") return addFemalePerson(person)
		return addMalePerson(person)
	}
	
	def addFemalePerson(person) {
		persons << person
		def sudonized = new PersonWrapper(gender:  person.gender, firstName: getFemaleFirstNameFor(person.firstName, person.lastName == null), lastName: getFemaleLastNameFor(person.lastName))
		person2Tolkienkin[person] = sudonized
		tolkienkin2person[sudonized] = person
		return sudonized
	}
	
	def getFemaleFirstNameFor(nonsudo, isLastNameNull) {
		if (isLastNameNull && lastNameMapper[nonsudo] != null) {
			return lastNameMapper[nonsudo]
		}
		if (firstNameMapper[nonsudo] != null) {
			return firstNameMapper[nonsudo]
		}
		def nextName = usableFemaleFirstNames[femaleIdx]
		femaleIdx = ++femaleIdx % usableFemaleFirstNames.size() //cyclic reading
		firstNameMapper[nonsudo] = nextName
		return nextName
	}
	
	def getFemaleLastNameFor(nonsudo) {
		if (nonsudo == null) return null
		if (lastNameMapper[nonsudo] != null) {
			return lastNameMapper[nonsudo]
		}
		def nextName = usableLastNames[lastNameIdx]
		lastNameIdx = ++lastNameIdx % usableLastNames.size() //cyclic reading
		lastNameMapper[nonsudo] = nextName
		return nextName
	}
	
	def addMalePerson(person) {
		persons << person
		def sudonized = new PersonWrapper(gender: person.gender, firstName: getMaleFirstNameFor(person.firstName, person.lastName == null), lastName: getMaleLastNameFor(person.lastName))
		person2Tolkienkin[person] = sudonized
		tolkienkin2person[sudonized] = person
		return sudonized
	}
	
	def getMaleFirstNameFor(nonsudo, isLastNameNull) {
		if (isLastNameNull && lastNameMapper[nonsudo] != null) {
			return lastNameMapper[nonsudo]
		}
		if (firstNameMapper[nonsudo] != null) {
			return firstNameMapper[nonsudo]
		}
		def nextName = usableMaleFirstNames[maleIdx]
		maleIdx = ++maleIdx % usableMaleFirstNames.size() //cyclic reading
		firstNameMapper[nonsudo] = nextName
		return nextName
	}
	
	def getMaleLastNameFor(nonsudo) {
		if (nonsudo == null) return null
		if (lastNameMapper[nonsudo] != null) {
			return lastNameMapper[nonsudo]
		}
		def nextName = usableLastNames[lastNameIdx]
		lastNameIdx = ++lastNameIdx % usableLastNames.size() //cyclic reading
		lastNameMapper[nonsudo] = nextName
		return nextName
	}
	
	def sudonize(rawString) {
		def rawInfos = rawString.split(" ")
		def info = rawInfos[1..-1]
		def fName = info[0]
		def lName = null
		if (info.size() != 1) {
			lName = info[-1]
		}
		def person = new PersonWrapper(gender: rawInfos[0], firstName : fName, lastName :  lName)
		if (person2Tolkienkin[person] == null) addPerson(person)
		register[rawString] = person2Tolkienkin[person].toString()
		return person2Tolkienkin[person]
	}
	
	def sudonize(rawString, annotation) {
		def gender = annotation == "FEMALE" ? "f" : "m"
		def info =  rawString.split(" ")
		def fName = info[0]
		def lName = null
		if (info.size() != 1) {
			lName = info[-1]
		}
		def person = new PersonWrapper(gender: gender, firstName : fName, lastName :  lName)
		if (person2Tolkienkin[person] == null) addPerson(person)
		register[rawString] = person2Tolkienkin[person].toString()
		return person2Tolkienkin[person]
	}
	
	def geRegister() {
		return register
	}
	
}

class OrgSudonizer implements Sudonizer {
	def random = new Random()
	def suffixes = [", co.", " ltd.", " Father & Sons", "©", "®", " Energy Company", " Deliveries", " Services", " Entreprises"]
	def voc = []
	def entityToSudo = [:]
	def sudoToEntity = [:]
	
	def register = [:]
	
	OrgSudonizer(vocFile, globalRegister) {
		voc = vocFile.readLines()
		register = globalRegister
	}
	
	def generate() {
		def idx1 = random.nextInt(voc.size())
		def idx2 = random.nextInt(voc.size())
		def idxSuffix = random.nextInt(suffixes.size())
		def generatedName = voc[idx1] + " & " + voc[idx2] + suffixes[idxSuffix]
		if (idx1 == idx2 || sudoToEntity.keySet().contains(generatedName)) {
			return generate()
		}
		return generatedName
	}
	
	def sudonize(rawString) {
		if (entityToSudo[rawString] == null) {
			def sudo = generate()
			entityToSudo[rawString] = sudo
			sudoToEntity[sudo] = rawString
		}
		register[rawString] = entityToSudo[rawString]
		return entityToSudo[rawString]
	}
	
	def geRegister() {
		return register
	}
}